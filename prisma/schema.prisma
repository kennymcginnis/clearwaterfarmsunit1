// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id
  username String  @unique
  display  String?
  member   String?

  active   Boolean @default(true)

  userAddress UserAddress[]

  primaryEmail   String? @unique
  secondaryEmail String?

  phones UserPhone[]

  ports        Port[]
  transactions Transactions[]
  schedules    UserSchedule[]

  defaultHours Float @default(0)

  restricted  Boolean @default(false)
  restriction String?

  image    UserImage?
  password Password?
  roles    Role[]
  sessions Session[]

  createdBy String   @default("Admin")
  createdAt DateTime @default(now())
  updatedBy String   @default("Admin")
  updatedAt DateTime @updatedAt
}

model Address {
  id      String @id
  address String @unique

  users        UserAddress[]
  parcelAndLot ParcelAndLot[]

  createdBy String   @default("Admin")
  createdAt DateTime @default(now())
  updatedBy String   @default("Admin")
  updatedAt DateTime @updatedAt
}

model UserAddress {
  id     String @id
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  address   Address @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  addressId String

  createdBy String   @default("Admin")
  createdAt DateTime @default(now())
  updatedBy String   @default("Admin")
  updatedAt DateTime @updatedAt

  @@index([userId, addressId])
}

model ParcelAndLot {
  id String @id

  address   Address @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  addressId String

  parcel String
  lot    String

  createdBy String   @default("Admin")
  createdAt DateTime @default(now())
  updatedBy String   @default("Admin")
  updatedAt DateTime @updatedAt
}

model UserPhone {
  id      String  @id
  type    String
  number  String
  primary Boolean @default(false)

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdBy String   @default("Admin")
  createdAt DateTime @default(now())
  updatedBy String   @default("Admin")
  updatedAt DateTime @updatedAt
}

model Port {
  id       String  @id
  ditch    Int
  position Int
  entry    String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdBy String   @default("Admin")
  createdAt DateTime @default(now())
  updatedBy String   @default("Admin")
  updatedAt DateTime @updatedAt
}

model Transactions {
  id String @id

  date   String
  debit  Float   @default(0)
  credit Float   @default(0)
  note   String?

  user       User?   @relation(fields: [userId], references: [id])
  userId     String?
  scheduleId String?
  ditch      Int?

  createdBy String   @default("Admin")
  createdAt DateTime @default(now())
  updatedBy String   @default("Admin")
  updatedAt DateTime @updatedAt

  @@map("Transactions")
}

model Schedule {
  id          String @id
  date        String
  deadline    String
  source      String
  costPerHour Int
  state       String @default("pending")

  start DateTime?
  stop  DateTime?

  userSchedules UserSchedule[]

  createdBy String   @default("Admin")
  createdAt DateTime @default(now())
  updatedBy String   @default("Admin")
  updatedAt DateTime @updatedAt
}

model UserSchedule {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  ditch      Int
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId String

  hours Float
  head  Int   @default(70)

  start DateTime?
  stop  DateTime?

  createdBy String   @default("Admin")
  createdAt DateTime @default(now())
  updatedBy String   @default("Admin")
  updatedAt DateTime @updatedAt

  @@id([userId, ditch, scheduleId])
}

model Meeting {
  id   String @id
  date String

  documents Document[]

  createdBy String   @default("Admin")
  createdAt DateTime @default(now())
  updatedBy String   @default("Admin")
  updatedAt DateTime @updatedAt
}

model Document {
  id      String @id
  type    String
  title   String
  content Bytes

  meeting   Meeting?        @relation(fields: [meetingId], references: [id])
  meetingId String?
  images    DocumentImage[]

  createdBy String   @default("Admin")
  createdAt DateTime @default(now())
  updatedBy String   @default("Admin")
  updatedAt DateTime @updatedAt
}

model Comment {
  id      String @id
  comment String

  createdBy String   @default("Admin")
  createdAt DateTime @default(now())
  updatedBy String   @default("Admin")
  updatedAt DateTime @updatedAt
}

model DocumentImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  documentId String

  createdBy String   @default("Admin")
  createdAt DateTime @default(now())
  updatedBy String   @default("Admin")
  updatedAt DateTime @updatedAt

  // non-unique foreign key
  @@index([documentId])
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. document, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  users       User[]
  permissions Permission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model ContentState {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  sha       String
  timestamp DateTime @updatedAt
}

model Content {
  id               String   @id @default(uuid())
  contentDirectory String
  slug             String   @unique
  title            String
  code             String
  frontmatter      String
  timestamp        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  published        Boolean
  requiresUpdate   Boolean? @default(false)
  description      String   @default("")
}
