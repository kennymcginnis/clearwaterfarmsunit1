// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         String  @id @default(cuid())
  username   String  @unique
  email      String  @unique
  name       String?
  orangewood String

  restricted Boolean        @default(false)
  ports      Port[]
  deposits   Deposit[]
  schedules  UserSchedule[]

  defaultHours Int @default(0)
  defaultHead  Int @default(70)

  image    UserImage?
  password Password?
  roles    Role[]
  sessions Session[]

  createdBy String   @default("Admin")
  createdAt DateTime @default(now())
  updatedBy String   @default("Admin")
  updatedAt DateTime @updatedAt
}

model Port {
  id       String  @id @default(cuid())
  ditch    Int
  position Int
  entry    String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdBy String   @default("Admin")
  createdAt DateTime @default(now())
  updatedBy String   @default("Admin")
  updatedAt DateTime @updatedAt
}

model Deposit {
  id String @id @default(cuid())

  date   DateTime @default(now())
  amount Float
  note   String

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdBy String   @default("Admin")
  createdAt DateTime @default(now())
  updatedBy String   @default("Admin")
  updatedAt DateTime @updatedAt
}

model Schedule {
  id          String   @id @default(cuid())
  date        DateTime @default(now())
  deadline    DateTime
  source      String
  costPerHour Int

  userSchedules UserSchedule[]

  createdBy String   @default("Admin")
  createdAt DateTime @default(now())
  updatedBy String   @default("Admin")
  updatedAt DateTime @updatedAt
}

model UserSchedule {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  ditch      Int
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId String

  hours Decimal
  // userCost (schedule.cost * hours)

  createdBy String   @default("Admin")
  createdAt DateTime @default(now())
  updatedBy String   @default("Admin")
  updatedAt DateTime @updatedAt

  @@id([userId, ditch, scheduleId])
}

model Meeting {
  id   String @id @default(cuid())
  date String

  documents Document[]

  createdBy String   @default("Admin")
  createdAt DateTime @default(now())
  updatedBy String   @default("Admin")
  updatedAt DateTime @updatedAt
}

model Document {
  id      String @id @default(cuid())
  type    String
  title   String
  content Bytes

  meeting   Meeting?        @relation(fields: [meetingId], references: [id])
  meetingId String?
  images    DocumentImage[]

  createdBy String   @default("Admin")
  createdAt DateTime @default(now())
  updatedBy String   @default("Admin")
  updatedAt DateTime @updatedAt
}

model Comment {
  id      String @id @default(cuid())
  comment String

  createdBy String   @default("Admin")
  createdAt DateTime @default(now())
  updatedBy String   @default("Admin")
  updatedAt DateTime @updatedAt
}

model DocumentImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  documentId String

  createdBy String   @default("Admin")
  createdAt DateTime @default(now())
  updatedBy String   @default("Admin")
  updatedAt DateTime @updatedAt

  // non-unique foreign key
  @@index([documentId])
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. document, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  users       User[]
  permissions Permission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}
